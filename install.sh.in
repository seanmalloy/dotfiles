#!/bin/bash

# DESCRIPTION
#
# Self extracting shell script to install Sean Malloy's dotfiles.

f_install()
{
    declare -r MATCH=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
    declare -r PAYLOAD_START=$((MATCH + 1))
    tail -n +$PAYLOAD_START $0 | tar xzf - -C $HOME
}

f_set_env()
{
    OS_TYPE="$(uname -s)" # Linux or Darwin

    if [[ -f /etc/centos-release ]]; then
        OS_VERSION="RedHat$(awk '{print $4}' /etc/centos-release | awk -F. '{print $1}')"
    elif [[ -f /etc/fedora-release ]]; then
        OS_VERSION="Fedora$(awk '{print $3}' /etc/fedora-release)"
    elif [[ -f /etc/redhat-release ]]; then
        OS_VERSION="RedHat$(awk '{print $7}' /etc/redhat-release | awk -F. '{print $1}')"
    elif [[ -f /etc/debian_version ]]; then
        OS_VERSION="Debian"
    else
        OS_VERSION=""
    fi

    SSH_CMD=$(which ssh 2> /dev/null)
    GH_CMD=$(which gh 2> /dev/null)
    GIT_CMD=$(which git 2> /dev/null)
}

f_post_clean()
{
    # Remove Linux binary files from Mac OSX
    if [[ $OS_TYPE == "Darwin" ]]; then
        rm -f $HOME/tech/bin/gh
        rm -f $HOME/tech/bin/helm
        rm -f $HOME/tech/bin/kind
        rm -f $HOME/tech/bin/kubectx
        rm -f $HOME/tech/bin/kubens
        rm -f $HOME/tech/bin/kubeval
        rm -f $HOME/tech/bin/present
        rm -f $HOME/tech/bin/shellcheck
        rm -f $HOME/tech/bin/shfmt
    fi
}

f_pre_clean()
{
    # Clean Obsolete Files, no longer used
    rm -f $HOME/.ackrc
    rm -f $HOME/.bash_profile
    rm -f $HOME/.perltidyrc
    rm -rf $HOME/.perlbrew/
    rm -rf $HOME/.puppet/var/puppet-module/skeleton/
    rm -f $HOME/tech/bin/ag
    rm -f $HOME/tech/bin/dep
    rm -f $HOME/tech/bin/fzf
    rm -f $HOME/tech/bin/jira
    rm -f $HOME/tech/bin/jq
    rm -f $HOME/tech/bin/memo
    rm -f $HOME/tech/bin/powerline-go
    rm -rf $HOME/tech/bin/rg

    # Clean Up Used Directories Before Install
    rm -rf $HOME/.bash_files/
    rm -rf $HOME/.terminfo/
    rm -rf $HOME/.vim/
}

f_setup_git()
{
    if [[ -n $GIT_CMD ]]; then
        if [[ -z "$DOTFILES_NAME" ]]; then
            read -p "Name: "  DOTFILES_NAME
            echo "DOTFILES_NAME=\"$DOTFILES_NAME\"" >> $ANSWER_FILE
        fi
        git config --global user.name  "$DOTFILES_NAME"

        if [[ -z $DOTFILES_EMAIL ]]; then
            read -p "Email: " DOTFILES_EMAIL
            echo "DOTFILES_EMAIL=\"$DOTFILES_EMAIL\"" >> $ANSWER_FILE
        fi
        git config --global user.email "$DOTFILES_EMAIL"
    fi
}

f_setup_github()
{
    if [[ -n $GIT_CMD ]]; then
        if [[ -z $DOTFILES_SETUP_GITHUB ]]; then
            read -p "Setup gh For Public GitHub? " DOTFILES_SETUP_GITHUB
            echo "DOTFILES_SETUP_GITHUB=\"$DOTFILES_SETUP_GITHUB\"" >> $ANSWER_FILE
        fi
        if [[ "$DOTFILES_SETUP_GITHUB" =  "y" ]]; then
            if [[ -n $GH_CMD ]]; then
                if [[ ! -d $HOME/.config/gh ]]; then
                    echo "Configuring gh For Public GitHub"
                    $GH_CMD auth login
                fi
            fi
        else
            echo "Skipping Public GitHub Configuration!"
        fi
    fi
}

f_setup_github_enterprise()
{
    if [[ -n $GIT_CMD ]]; then
        if [[ -z $DOTFILES_SETUP_GITHUB_ENTERPRISE ]]; then
            read -p "Setup gh For GitHub Enterprise? " DOTFILES_SETUP_GITHUB_ENTERPRISE
            echo "DOTFILES_SETUP_GITHUB_ENTERPRISE=\"$DOTFILES_SETUP_GITHUB_ENTERPRISE\"" >> $ANSWER_FILE
        fi
        if [[ "$DOTFILES_SETUP_GITHUB_ENTERPRISE" =  "y" ]]; then
            if [[ -z $DOTFILES_GITHUB_ENTERPRISE_HOST ]]; then
                read -p "GHE Host: "  DOTFILES_GITHUB_ENTERPRISE_HOST
                echo "DOTFILES_GITHUB_ENTERPRISE_HOST=\"$DOTFILES_GITHUB_ENTERPRISE_HOST\"" >> $ANSWER_FILE
            fi
            if [[ -n $GH_CMD ]]; then
                if [[ ! -d $HOME/.config/gh ]]; then
                    echo "Configuring gh For GitHub Enterprise"
                    $GH_CMD auth login --hostname $DOTFILES_GITHUB_ENTERPRISE_HOST
                fi
            fi
        else
            echo "Skipping GitHub Enterprise Configuration!"
        fi
    fi
}

# Variable LOCAL_PROXY_SERVER is used by the p() shell function
# to toggle the proxy settings.
f_setup_proxy()
{
    if [[ -z "$LOCAL_PROXY_SERVER" ]]; then
        read -p "Proxy Server: "  LOCAL_PROXY_SERVER
        echo "LOCAL_PROXY_SERVER=\"$LOCAL_PROXY_SERVER\"" >> $ANSWER_FILE
    fi
}

f_setup_shfmt()
{
    ln -fs shfmt_v3.1.2_linux_amd64 $HOME/tech/bin/shfmt
}

f_setup_ssh()
{
    if [[ -z $SSH_CMD ]]; then
        return 0
    fi

    # Setup jump host
    if [[ -z $DOTFILES_SSH_JUMP_HOST ]]; then
        read -p "SSH Jump Host: " DOTFILES_SSH_JUMP_HOST
        echo "DOTFILES_SSH_JUMP_HOST=\"$DOTFILES_SSH_JUMP_HOST\"" >> $ANSWER_FILE
    fi
    sed -i "s/JUMPHOST/$DOTFILES_SSH_JUMP_HOST/g" $HOME/.ssh/config
    chmod 700 $HOME/.ssh 2> /dev/null
}

f_setup_tmuxinator()
{
    echo "Configuring Tmuxinator Project: default"
    declare -r TMUX_HOSTNAME=$(hostname -s)
    perl -pi -e "s/HOSTNAME/$TMUX_HOSTNAME/g" $HOME/.tmuxinator/default.yml

}

read -p "Install files? " ans
if [[ "${ans:0:1}"  ||  "${ans:0:1}" ]]; then
    declare -r ANSWER_FILE="$HOME/.dotfiles_answers"
    if [[ -f $ANSWER_FILE ]]; then
        source $ANSWER_FILE
    else
        touch $ANSWER_FILE
    fi
    f_pre_clean
    f_set_env
    f_install
    
    # Do remainder of install steps.
    f_setup_git
    f_setup_github
    f_setup_github_enterprise
    f_setup_proxy
    f_setup_shfmt
    f_setup_ssh
    f_setup_tmuxinator
    f_post_clean
fi
exit 0

